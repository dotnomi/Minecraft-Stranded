name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7

      - name: Set up JDK
        uses: actions/setup-java@v4.2.2
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew build

      - name: Extract version
        id: extract_version
        run: |
          VERSION=$(grep '^mod_version=' gradle.properties | cut -d'=' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Read changelog
        id: read_changelog
        run: |
          CHANGELOG_CONTENT=$(cat changelogs/${{ env.VERSION }}.md)
          
          # Append version-specific message
          if [[ "${{ env.VERSION }}" == *"a" ]]; then
            WARNING="IMPORTANT: This is an alpha build. There might be bugs."
          elif [[ "${{ env.VERSION }}" == *"b" ]]; then
            WARNING="IMPORTANT: This is a beta build. There might be bugs."
          elif [[ "${{ env.VERSION }}" == *"r" ]]; then
            WARNING=""
          else
            WARNING=""
          fi
          
          echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG_CONTENT" >> $GITHUB_ENV
          echo -e "\n$WARNING" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Check if Release Exists
        id: check_release
        run: |
          RELEASE_EXISTS=$(curl -s -H "Authorization: token ${{ secrets.UPLOAD_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.VERSION }} | jq -r '.tag_name // empty')
          if [ "$RELEASE_EXISTS" == "${{ env.VERSION }}" ]; then
            echo "Release already exists. Deleting..."
            curl -s -X DELETE -H "Authorization: token ${{ secrets.UPLOAD_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/releases/$(curl -s -H "Authorization: token ${{ secrets.UPLOAD_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.VERSION }} | jq -r '.id')
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.UPLOAD_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.UPLOAD_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Stranded - v${{ env.VERSION }}
          body: ${{ env.CHANGELOG_CONTENT }}
          draft: false
          prerelease: false

      - name: Upload JAR file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.UPLOAD_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/libs/stranded-${{ env.VERSION }}.jar
          asset_name: stranded-${{ env.VERSION }}.jar
          asset_content_type: application/java-archive